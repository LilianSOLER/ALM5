function circuit (a, b, c: bool) returns (f : bool);
-- ceci est un circuit comportant deux entrees et une sortie
let
f = (a and b) or not c;
tel;
----------------------------------------------------------------
function cir1 (a, b : bool) returns (c : bool);
-- ceci est un circuit comportant deux entrees et une sortie
let
c = a and not b;
tel;
----------------------------------------------------------------------
function cir2 (a, b : bool)
returns (c, d : bool);
let
c = a and b;
d = a and not b;
tel;
----------------------------------------------------------------------
function cir6 (x, y : bool^3)
returns (z, t : bool^3);
let
(z[0..2], t[0..2]) =
map <<cir2;3>> (x[0..2], y[0..2]);
tel;
----------------------------------------------------------------------
function cir7prime (x:bool^3 ; aa:bool)
returns (z,t:bool^3);
let
(z, t) = map <<cir2; 3>> (x, aa^3);
tel;
----------------------------------------------------------------------
function cir7 (x:bool^3 ; aa:bool)
returns (z,t:bool^3);
let
(z[0..2], t[0..2]) =
map <<cir2; 3>> (x[0..2], aa^3);
tel;
----------------------------------------------------------------------
function cir8prime (x:bool^3 ; aa:bool)
returns (y:bool^3 ; bb:bool);
var a : bool^4;
let
a[3] = aa;
bb = a[0];
(a[0..2], y) = map <<cir2; 3>> (x, a[1..3]);
tel;

----------------------------------------------------------------------
-- multiplication par 2
function mult2<<const n:int>> (x:bool^n-1) returns (y:bool^n);
let
y[0]=false;
y[1..n-1]=x[0..n-2];
tel;
function instmult2= mult2<<5>>;

----------------------------------------------------------------------
function cir8tier <<const n:int>>  (x:bool^n ; aa:bool)
returns (y:bool^n ; bb:bool);
var a : bool^(n+1);
let
a[n] = aa;
bb = a[0];
(a[0..n-1], y) = map <<cir2; n>> (x, a[1..n]);
tel;

function instcir8=cir8tier<<8>>;
----------------------------------------------------------------------

function cir9 <<const nn: int >> (x: bool^nn)
returns (z: bool^nn);
let
z=map <<not; nn>>(x);
tel;
function instcir9=cir9<<8>>;

----------------------------------------------------------------------
function unebascule (ent, char, reset : bool) returns (sort : bool);
-- Le signal CK n'a pas a etre explicite
var D : bool; -- l'entrÃ©e de la bascule D simple interne
let
D = not(reset) and mux1(char, ent, sort);
sort = true -> pre D;
-- Attention : XXX peut etre remplace au choix par true ou false.
-- On ne sait pas ce qu'affiche une bascule avant le premier coup d'horloge
tel;

function mux1(i, t, e : bool) returns (s : bool);
let
s = i and t or not i and e;
tel;

