<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en-US"><head>



  
    <meta http-equiv="content-type" content="text/html; charset=utf-8"><title>Workshop: Programming Basics</title>
    
    <meta name="CHANGEDBY" content="Pr. Olivier Gruber">
    <link rel="stylesheet" href="../style.css" type="text/css"> 
    <script src="../common.js"></script>
    <link rel="stylesheet" href="../highlight.js/styles/default.css">
    <script src="../highlight.js/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script></head><body onload="shellOnLoad()">

    <script>
      function shellOnLoad() {
        multiLang();
        /*hljs.initHighlightingOnLoad(); */
      }  
    </script>
    
    <div id="outer-container">
      <div id="header">
	<div id="logo">
	  <img src="../logo_uga.png" alt="Université Grenoble-Alpes" border="0" height="100">
	  <img src="../logo_reseau_polytech.gif" alt="Polytech" border="0" height="80">
	</div>
	<div id="top-links">
	  <a href="../index.html">Home</a> 
	</div>
      </div>
      <div id="inner-container">
	
	<h1>Assembly Programming Basics</h1>

	<h2>Task1 -- Execution Flow</h2>

	<h3>Step4 -- Une histoire de division<br>
</h3>

<p>
Pour cette étape, replacez-vous dans le répertoire <b>task1</b>.
</p>

	<p>
	  Nous allons écrire un programme qui permet d'effectuer
la division entière de deux entiers positifs. L'algorithme que nous
proposons pour diviser r0 par r1 est le suivant:</p>
<p>Compter le nombre de fois que l'on peut soustraire r1 à r0 jusqu'à
que r0 soit plus petit que r1. Le nombre trouvé est le quotient de la
division. La valeur de r0 finale contient le reste de la division.<br>
</p>
<p>Exemple:<br>

	</p>

	<pre><code class="arm">
	    r0 = 14
	    r1 = 5
	    r2 = 0

	    is r0 less than r1? (14 &lt; 5) No.
	      r0 = r0 - r1 = 9 
	      r2 = r2 + 1 = 1
	    
    	    is r0 less than r1? (9 &lt; 5) No.
	      r0 = r0 - r1 = 4
	      r2 = r2 + 1 = 2

    	    is r0 less than r1? (4 &lt; 5) Yes.
	       the remainder is 4
	       the division is 2
	</code></pre>

	<p>Où mettre le code assembleur de votre programme ? On peut l'ajouter au fichier <span style="font-style: italic;">start.s</span> :
	</p>
	<pre><code class="arm">
.global _start
_start:
	mov r0, #0	 
_loop:	                 
	cmp r0, #5	 
	bge _halt        
	add r0, r0, #1   
	b   _loop        
_halt:
        b _halt          

_div:
        // Add your division code here...
        b _halt
	</code></pre>
	<p>Ajoutez votre code et recompilez <span style="font-style: italic;">start.s</span> à l'aide du <span style="font-style: italic;">makefile</span>.<br>

	</p>
	<p>Lancez <span style="font-style: italic;">qemu</span> et <span style="font-style: italic;">gdb</span>. On a envie de s'arrêter au début de notre programme de division et donc "passer" la première boucle sur <span style="font-style: italic;">_loop</span>. Pour cela on peut mettre un <span style="font-style: italic; font-weight: bold;">point d'arrêt</span> au début de notre programme (étiquette <span style="font-style: italic;">_div</span>) à l'aide de gdb:
	</p>
	<textarea class="terminal" rows="4">  (gdb) br _div
  Breakpoint 2 at 0x10018: file start.s, line 13.
  (gdb)
	</textarea>
	<p>On peut maintenant lancer le programme à l'aide de la commande <span style="font-style: italic;">cont</span>, il va s'arrêter au point d'arrêt, ici l'étiquette <span style="font-style: italic;">_div</span><br>

	</p>
	<textarea class="terminal" rows="13">  $ make qemu
  ...	  
  Reading symbols from start.elf...done.
  0x00000000 in ?? ()
  Breakpoint 1 at 0x10000: file start.s, line 3.

  Breakpoint 1, _start () at start.s:3
  3		mov r0, #0	   
  (gdb) br _div
  Breakpoint 2 at 0x10018: file start.s, line 13.
  (gdb) cont
  Continuing.
	</textarea>
	<p>Hum
que se passe t il ? gdb ne semble plus réagir. Le programme n'est donc
par arrivé au point d'arrêt. On peut essayer de l'arrêter en tapant un
Ctrl-C :
	</p>
	<textarea class="terminal" rows="8">  (gdb) cont
  Continuing.
  ^C
  Program received signal SIGINT, Interrupt.
  _halt () at start.s:10
  10		b _halt
  (gdb) 
	</textarea>
	<p>GDB nous indique où est arrêté le programme: à la ligne 10 sur l'etiquette <span style="font-style: italic;">_halt</span> . Remédiez au problème en faisant en sorte que le programme ne boucle plus sur l'étiquette <span style="font-style: italic;">_halt</span> mais exécute ce qui est à la suite de <span style="font-style: italic;">_div</span>.<br>

	</p><p>
	</p><p>Après modification il faut bien sûr recompiler <span style="font-style: italic;">start.s</span>, quitter QEMU et GDB et les relancez.
	</p>
	<textarea class="terminal" rows="5">	  (gdb) kill
	  Kill the program being debugged? (y or n) y
	  (gdb) quit
	  $
	</textarea>
	<p>N'oubliez
pas de re-définir vos points d'arrêt avant de relancer le programme. En
effet, à chaque fois que vous quittez gdb, il oublie ce que vous avez
fait.
	</p>
	<textarea class="terminal" rows="4">  (gdb) br _div
  Breakpoint 2 at 0x10018: file start.s, line 13.
  (gdb)
	</textarea>
	<p>On peut aussi définir un point d'arrêt en donnant le nom du fichier source et un numéro de ligne, comme ceci:
	</p>
	<textarea class="terminal" rows="4">  (gdb) br start.s:13
  Breakpoint 2 at 0x10018: file start.s, line 13.
  (gdb)
	</textarea>
<br>
<br>
Vérifier que votre programme effectue bien la division voulu. Si ce
n'est pas le cas mettez des points d'arrêt au bons endroits afin de
vérifier par exemple, le contenu des registres après certains calculs.
Le debogueur devient votre ami.<br>
<br>
Modifiez votre programme afin qu'il divise 16 par 3 puis 20 par 7.<br>
Faut il dupliquer absolument le code précédemment écrit ?<br>
Essayez de ne pas le faire en rajoutant un minimum d'instruction.<br>
<br><br>
<div id="footer">
	  © UFR IM2AG
	  <div id="bottom-links" style="float: right;">
	    <a href="../index.html">Home</a> 
	  </div>
	</div>
      </div>
    </div>
  </body></html>
