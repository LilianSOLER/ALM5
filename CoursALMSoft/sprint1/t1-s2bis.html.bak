<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en-US">  <head>    <meta http-equiv="content-type" content="text/html; charset=utf-8">    <title>Workshop: Programming Basics</title>    <meta name="CHANGEDBY" content="Pr. Olivier Gruber">    <link rel="stylesheet" href="../style.css" type="text/css">    <script src="../common.js"></script>    <link rel="stylesheet" href="../highlight.js/styles/default.css">    <script src="../highlight.js/highlight.pack.js"></script>    <script>hljs.initHighlightingOnLoad();</script>  </head>  <body onload="shellOnLoad()">    <script>      function shellOnLoad() {        multiLang();        /*hljs.initHighlightingOnLoad(); */      }      </script>    <div id="outer-container">      <div id="header">        <div id="logo"> <img src="../logo_uga.png" alt="Université Grenoble-Alpes"            border="0"            height="100">          <img src="../logo_reseau_polytech.gif" alt="Polytech" border="0" height="80">        </div>        <div id="top-links"> <a href="../index.html">Home</a> </div>      </div>      <div id="inner-container">        <h1>Bases du langage C<br>        </h1>        <h2>Task1 -- Flot d'exécution<br>        </h2>        <h3>Step3: Et que fait un compilateur C ?<br>        </h3>        <p>Passez dans le répertoire task1s3C.</p>        <p>Voici le programme C se trouvant dans le fichier <span style="font-style: italic;">branch.c:</span>        </p>        <pre><code class="arm">#include &lt;stdio.h&gt;/************************************************************  Branchement */int main (){    int x;    x = 0;    while (x &lt;<!----> 5) {        x = x + 1;        printf("Passage dans la boucle, x=%d \n", x); // impression à l'ecran    }    while (1) {} //boucle infini}</code></pre>        <p>Plusieurs choses pour comprendre ce premier programme C :</p>        <p><span style="font-weight: bold; font-style: italic;">#include            &lt;stdio.h&gt;</span> est une directive de compilation permettant          d'inclure une bibliothèque <br>          de nom stdio.h (STanDard Input Output)<br>          <br>          Les commentaires sont soit éncadré par <span style="font-style: italic; font-weight: bold;">/*</span>          et <span style="font-weight: bold; font-style: italic;">*/</span>,          soit débute par <span style="font-style: italic; font-weight: bold;">//</span>          sur une ligne.<br>          <br>          Le programme commence après <span style="font-style: italic; font-weight: bold;">int            main ()</span><br>          <br>          Une variable est déclarée en donnant son type et son nom (<span style="font-weight: bold; font-style: italic;">int            x;</span>) ici <span style="font-weight: bold; font-style: italic;">x</span>          est une variable<br>          contenant un entier relatif.<br>          Les acolades <span style="font-weight: bold; font-style: italic;">{}</span>          permettent de définir un bloc d'instructions ou le corps d'une          fonction.<br>          <br>          <span style="font-weight: bold; font-style: italic;">=</span> permet          d'affecter une nouvelle valeur à une variable.<br>          <br>          <span style="font-style: italic; font-weight: bold;">while(x&lt;5)</span>          permet de définir une boucle dont la condition d'arrêt est <span style="font-style: italic; font-weight: bold;">x&lt;5</span>.<br>          <br>          <span style="font-weight: bold; font-style: italic;">printf</span> est          une fonction de la llibrairie <span style="font-style: italic; font-weight: bold;">stdio</span>          permettant          d'afficher une chaine de caractère à l'écran.<br>        </p>        <p>&nbsp;Ce programme vous parait il "équivalent" à celui étudié          précédemment dans start.s ?</p>        <p>Quelles sont les différences majeures ? <br>        </p>        <p>Programme start.s:<br>        </p>        <pre><code class="arm">.global _start<br>_start:<br>	mov r0, #0	 // load r0 with 0<br>_loop:	                 // loop until r0==5<br>	cmp r0, #5	 // compare r0 with 5<br>	bge _halt        // if r0&gt;=5, branch to _halt<br>	add r0, r0, #1   // increment the register r0<br>	b   _loop        // loop over<br>_halt:<br>	b _halt          // spinning until powered down.<br><br></code></pre>        <p>Essayez de créer un exécutable sur votre machine (par <span style="font-weight: bold; font-style: italic;">make
            branch</span>).</p>        <p>Le programme exécutable se trouve dans le fichier <span style="font-weight: bold; font-style: italic;">./branch</span>.<br>        </p>        <p>Exécuter le programme en tapant <span style="font-style: italic; font-weight: bold;">branch.
            </span><span style="font-weight: bold;"></span>Convaincu ?<br>        </p>        <p><br>        </p>        <p>Faites <span style="font-weight: bold;">make branch.s</span></p>        <p>Observons le code assembleur produit par le compilateur gcc dans          branch.s<br>        </p>        <ul>          <li>Retrouvez l'étiquette main dans branch.s.</li>          <li>Pour l'instant on ne regarde pas les instructions <span style="font-style: italic;">push</span>            et <span style="font-style: italic;">bl printf</span> que l'on            étudiera plus loin.<br>          </li>          <li>Quel registre permet de stocker la valeur de la variable x ?</li>          <li>Quelles instructions permettent de traduire la boucle while ?<br>          </li>          <li>Est ce que le branchement permettant de sortir de la boucle <span              style="font-style: italic;">while</span>            est la même que celle utilisée dans <span style="font-style: italic;">start.s</span>            (<span style="font-style: italic;">bge</span>) ? Est ce équivalent ?            Pourquoi ?<br>          </li>          <li>Où retrouve t-on la boucle infini ?<br>          </li>        </ul>        <br>        <p>Exécuter sous gdb le programme branch.s après avoir fait les          compilations nécessaires: <br>        </p>        <ul>          <li>make </li>        </ul>        Exécutez en pas à pas votre programme et vérifiez qu'il a le même        comportement que start.s<br>        <br>        <br>        <span style="font-family: Arial,Serif;">Enlevez de <span style="font-weight: bold; font-style: italic;">branch.c</span>          l'instruction <span style="font-style: italic; font-weight: bold;">printf</span>.<br>          Recompilez <span style="font-weight: bold; font-style: italic;">branch.s</span><br>          <br>          Observez le code assembleur produit par le compilateur, surprenant non          ? Expliquez ce code.<br>        </span>        <p></p>        <div id="footer"> © UFR IM2AG          <div id="bottom-links" style="float: right;"> <a href="../index.html">Home</a>          </div>        </div>      </div>    </div>  </body></html>