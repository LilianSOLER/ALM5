<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en-US">  <head>    <meta http-equiv="content-type" content="text/html; charset=utf-8">    <title>Workshop: Programming Basics</title>    <meta name="CHANGEDBY" content="Pr. Olivier Gruber">    <link rel="stylesheet" href="../style.css" type="text/css">    <script src="../common.js"></script>    <script src="../quizz.js"></script>    <link rel="stylesheet" href="../highlight.js/styles/default.css">    <script src="../highlight.js/highlight.pack.js"></script>    <script>hljs.initHighlightingOnLoad();</script>  </head>  <body onload="shellOnLoad()">    <script>      function shellOnLoad() {        multiLang();        /*hljs.initHighlightingOnLoad(); */        _quizzes = new Array();        parseQuizzes();      }      </script>    <div id="outer-container">      <div id="header">        <div id="logo"> <img src="../logo_uga.png" alt="Université Grenoble-Alpes"            border="0"            height="100">          <img src="../logo_reseau_polytech.gif" alt="Polytech" border="0" height="80">        </div>        <div id="top-links"> <a href="../index.html">Home</a> </div>      </div>      <div id="inner-container">        <h1>Les bases de l'assembleur</h1>        <h2>Task3 -- Utilisation de la mémoire<br>        </h2>        <h3>Step2 --&nbsp; Un premier exercice<br>        </h3>        <p>Suposons que l'on veuille ajouter n valeurs consécutives en mémoire.          Cela pourrait être les éléments d'un tableau. Voici le début de ce          programme :<br>        </p>        <pre><code class="arm"><br>	    ldr r0, [pc]<br>	    b  .L1<br>   	    .word &lt;4-byte value&gt;  <br>	    .word &lt;4-byte value&gt;<br><br>	    .word &lt;4-byte value&gt;<br>            ...<br>	.L1:<br>	</code></pre>        <p>Ecrivez la suite du programme se trouvant&nbsp; à l'étiquette <span            style="font-style: italic;">.L1</span>          permettant de faire cette somme.</p>        <p>A savoir l'instruction <span style="font-style: italic;">ldr</span>          (ou <span style="font-style: italic;">str</span>) peut utiliser le          contenu d'un deuxième registre à la place d'une valeur immédiate lors          du calcul de l'adresse, exemple:<br>        </p>        <pre><code class="arm"><br>	    ldr r3, [r0,r1]<br><br> </code></pre>        <span style="font-family: Arial,Serif;">Compilez et exécutez votre          programme pour vérifier qu'il fonctionne.<br>          <br>          Il est possible en assembleur de donner une autre étiquette comme          valeur se trouvant derrière la directive <span style="font-style: italic;">.word
            <br> Exemple:<br>          </span></span>        <pre><code class="arm"><br>	    ldr r0, [pc]<br>	    b  .L1<br>            .word array<br>        .L1:<br>	    /* your code here */    <br><br>	array:<br>	    .word &lt;4-byte value&gt;<br><br>	    .word &lt;4-byte value&gt;<br>	    .word &lt;4-byte value&gt;<br>            ...<br>	</code></pre>        <p>Adaptez votre programme qui calcule les sommes des éléments du          tableau à ce modèle.</p>        <p><span style="font-family: Arial,Serif;">Compilez et exécutez votre            programme pour vérifier qu'il fonctionne.</span></p>        <p><span style="font-family: Arial,Serif;">Nous pouvons donc maintenant            placer des variables n'importe où en mémoire et les manipuler sans            se soucier de leur emplacement. C'est l'assembleur qui calcule les            adresses, nous ne manipulons que des étiquettes.</span></p>        <p><span style="font-family: Arial,Serif;">Pour écrire des programmes            plus lisible, il est possible de séparer les données, des            instructions comme dans cet exemple:</span></p>        <pre><code class="arm">.data // zone reserve aux donnees<br>     var1:.word 0xFF<br>     var2:.word 0xEE<br><br>.text  // zone des instructions<br><br>	<spanstyle="font-weight: bold;">ldr r0, [pc , #deplac_relai_var1]</span><br>        //deplac_relai_var1 est une valeur à calculer <br>	//elle permet de recuperer l'adresse var1 dans r0<br>	....<br><br> relai_var1:       .word var1<br></code><codeclass="arm"> relai_var2:       .word var2</code></pre>        <p><span style="font-family: Arial,Serif;"> Il est compliqué alors de            calculer le déplacement <span style="font-style: italic;">deplac_relai_var1</span>            permettant de récupérer l'adresse <span style="font-style: italic;">var1.
              </span>Il est possible de laisser l'assembleur le faire pour nous            en utilisant cette syntaxe:</span></p>        <pre><code class="arm"><span style="font-weight: bold;">        ldr r0, relai_var1</span><br></code></pre>        <p><span style="font-family: Arial,Serif;">Ce n'est pas une nouvelle            instruction mais une facilité d'écriture. L'assembleur va la            traduire en un<code class="arm"><span style="font-weight: bold;">                ldr r0, [pc , #deplac_relai_var1]</span></code> en calculant le            bon déplacement.<br>            <br>            Il est même possible de simplifier encore l'écriture sans se soucier            de l'adresse <span style="font-style: italic;">relai</span> comme            ceci:</span></p>        <pre><code class="arm">.data // zone reserve aux donnees<br>     var1:.word 0xFF<br>     var2:.word 0xEE<br><br>.text  // zone des instructions<br><br> <spanstyle="font-weight: bold;">ldr r0, =var1</span><br>                 //r0 contient ensuite l'adresse correspondante à l'étiquette var1<br>	....<br><br> .ltorg //l'assembleur gere les adresses relais pour nous</code><br><br><codeclass="arm"></code></pre>        Modifier votre programme en utilisant ces écritures.<br>        <br>        <p> </p>        <div id="footer"> © UFR IM2AG          <div id="bottom-links" style="float: right;"> <a href="../index.html">Home</a>          </div>        </div>      </div>    </div>  </body></html>